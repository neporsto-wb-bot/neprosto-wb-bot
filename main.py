import os
import logging
import openai
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É WB, –∏ —è –≤—Å—ë –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é!")

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    if "wildberries.ru" not in url:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries.")
        return

    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—Å—è, –ø–æ–¥–æ–∂–¥–∏ 20‚Äì30 —Å–µ–∫—É–Ω–¥...")

    try:
        result = run_analysis_v2(url)
        await update.message.reply_text(result)
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def run_analysis_v2(card_url: str) -> str:
    # üîß –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—Å—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: —Ñ–æ—Ç–æ, –æ—Ç–∑—ã–≤—ã, –≤–æ–ø—Ä–æ—Å—ã, —Ä–µ–π—Ç–∏–Ω–≥, —Ñ–æ—Ç–æ-–æ—Ç–∑—ã–≤—ã –∑–∞ 14 –¥–Ω–µ–π
    # –°–µ–π—á–∞—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞:
    return (
        "üõí –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ Wildberries (v2)\n\n"
        "‚úÖ –û—Ç—Ä–∞–∂–µ–Ω—ã:\n"
        "- –£–¥–æ–±—Å—Ç–≤–æ –≤ –Ω–æ—Å–∫–µ\n"
        "- –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞ –æ—Å–∞–Ω–∫—É\n\n"
        "‚ùå –ù–µ –æ—Ç—Ä–∞–∂–µ–Ω—ã:\n"
        "- –ó–∞–ø–∞—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏\n"
        "- –í–æ–ø—Ä–æ—Å—ã –ø–æ –ª–∏–ø—É—á–∫–∞–º\n\n"
        "üìä –†–µ–π—Ç–∏–Ω–≥: 4.7\n"
        "üñºÔ∏è –û—Ç–∑—ã–≤–æ–≤ —Å —Ñ–æ—Ç–æ –∑–∞ 14 –¥–Ω–µ–π: 17"
    )


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze))
    app.run_polling()


if __name__ == "__main__":
    main()
