```python
import os
import logging
import requests
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from openai import OpenAI
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI (v0.27+)
client = OpenAI(api_key=OPENAI_API_KEY)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É WB, –∏ —è –≤—Å—ë –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é!"
    )

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å—Å—ã–ª–æ–∫"""
    try:
        url = update.message.text.strip()
        await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—Å—è, –ø–æ–¥–æ–∂–¥–∏ 20‚Äì30 —Å–µ–∫—É–Ω–¥...")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç–æ—á–∫–∏ WB
        resp = requests.get(url, timeout=15)
        resp.raise_for_status()

        soup = BeautifulSoup(resp.text, "html.parser")
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 20/10 —à—Ç—É–∫)
        reviews = [tag.get_text(strip=True) for tag in soup.select(".feedback__text")][:20]
        questions = [tag.get_text(strip=True) for tag in soup.select(".question__text")][:10]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è AI
        prompt = (
            f"–í–æ—Ç –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:\n" + "\n".join(reviews)
            + f"\n\n–í–æ—Ç –≤–æ–ø—Ä–æ—Å—ã:\n" + "\n".join(questions)
            + "\n\n–£–∫–∞–∂–∏ \"‚úÖ –û—Ç—Ä–∞–∂–µ–Ω—ã:...\" –∏ \"‚ùå –ù–µ –æ—Ç—Ä–∞–∂–µ–Ω—ã:...\" –±–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
        )

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        resp_ai = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –¥–µ–ª–∞–µ—à—å —Å—É—Ö–æ–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ Wildberries."},
                {"role": "user", "content": prompt},
            ],
            timeout=60
        )

        answer = resp_ai.choices[0].message.content
        await update.message.reply_text(f"üõí –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ Wildberries (v2):\n{answer}")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–ø–¥–µ–π—Ç—ã
    await app.bot.delete_webhook(drop_pending_updates=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

    # –°—Ç–∞—Ä—Ç Polling
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == '__main__':
    asyncio.run(main())
```
