import os
import logging
import openai
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
async def analyze_wb_card(text_data):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ—Ç—Ä–∞–∂–µ–Ω—ã, –∞ –∫–∞–∫–∏–µ –Ω–µ—Ç. –ù–µ –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç–æ–≤. –ü—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª–∏ –∫–∞–∫ '–û—Ç—Ä–∞–∂–µ–Ω—ã' –∏ '–ù–µ –æ—Ç—Ä–∞–∂–µ–Ω—ã'. –í –∫–æ–Ω—Ü–µ –≤—ã–≤–µ–¥–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∏ —á–∏—Å–ª–æ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ñ–æ—Ç–æ –∑–∞ 14 –¥–Ω–µ–π."},
                {"role": "user", "content": text_data}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É WB, –∏ —è –≤—Å—ë –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    if "wildberries.ru" not in url:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É Wildberries. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—Å—è, –ø–æ–¥–æ–∂–¥–∏ 20‚Äì30 —Å–µ–∫—É–Ω–¥...")

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É—Å–ª–æ–≤–Ω–æ ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤/–≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∑–∂–µ)
        response = requests.get(url)
        response.encoding = 'utf-8'
        page_text = response.text[:4000]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞

        result = await analyze_wb_card(page_text)
        await update.message.reply_text("üõí –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ Wildberries (v2):\n\n" + result)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

    app.run_polling()

if __name__ == "__main__":
    main()
